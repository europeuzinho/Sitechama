

export interface RedemptionCode {
    code: string;
    restaurantId: string; // Link code to a restaurant
    isUsed: boolean;
    usedBy?: string; // userId of the user who used it
    usedAt?: string; // ISO 8601 date string
    createdAt: string; // ISO 8601 date string
}

const CODES_STORAGE_KEY = 'redemptionCodes';

// Initial mock data is now empty, will be generated by restaurants
const initialCodes: RedemptionCode[] = [];

function getAllCodes(): RedemptionCode[] {
    if (typeof window === 'undefined') {
        return [];
    }
    try {
        const storedCodes = window.localStorage.getItem(CODES_STORAGE_KEY);
        if (storedCodes) {
            return JSON.parse(storedCodes);
        } else {
            window.localStorage.setItem(CODES_STORAGE_KEY, JSON.stringify(initialCodes));
            return initialCodes;
        }
    } catch (error) {
        console.error("Failed to parse codes from localStorage", error);
        return [];
    }
}

function saveAllCodes(codes: RedemptionCode[]): void {
    if (typeof window === 'undefined') {
        return;
    }
    try {
        window.localStorage.setItem(CODES_STORAGE_KEY, JSON.stringify(codes));
        window.dispatchEvent(new CustomEvent('codesChanged'));
    } catch (error) {
        console.error("Failed to save codes to localStorage", error);
    }
}

/**
 * Attempts to redeem a code for a user.
 * @param code The code string to redeem.
 * @param userId The ID of the user attempting to redeem.
 * @returns An object with success status and a message.
 */
export function redeemCode(code: string, userId: string): { success: boolean, message: string } {
    const allCodes = getAllCodes();
    const codeToRedeem = allCodes.find(c => c.code.toUpperCase() === code.toUpperCase());

    if (!codeToRedeem) {
        return { success: false, message: "Código inválido. Por favor, verifique e tente novamente." };
    }

    if (codeToRedeem.isUsed) {
        return { success: false, message: "Este código já foi utilizado." };
    }

    // Mark the code as used
    codeToRedeem.isUsed = true;
    codeToRedeem.usedBy = userId;
    codeToRedeem.usedAt = new Date().toISOString();

    saveAllCodes(allCodes);

    return { success: true, message: "Código resgatado com sucesso!" };
}

/**
 * Generates a specified number of new codes for a restaurant.
 * @param restaurantId The ID of the restaurant to generate codes for.
 * @param count The number of codes to generate.
 * @returns The array of newly generated codes.
 */
export function generateCodesForRestaurant(restaurantId: string, count: number): RedemptionCode[] {
    const allCodes = getAllCodes();
    const newCodes: RedemptionCode[] = [];

    for (let i = 0; i < count; i++) {
        // Use a timestamp to ensure more uniqueness
        const timestamp = Date.now().toString(36).slice(-4).toUpperCase();
        const randomPart = Math.random().toString(36).substring(2, 6).toUpperCase();
        
        const newCode: RedemptionCode = {
            code: `${restaurantId.substring(0, 3).toUpperCase()}-${timestamp}${randomPart}`,
            restaurantId: restaurantId,
            isUsed: false,
            createdAt: new Date().toISOString()
        };
        newCodes.push(newCode);
    }
    
    saveAllCodes([...allCodes, ...newCodes]);
    return newCodes;
}

/**
 * Gets all redemption codes for a specific restaurant.
 * @param restaurantId The ID of the restaurant.
 * @returns An array of codes for that restaurant.
 */
export function getCodesByRestaurant(restaurantId: string): RedemptionCode[] {
    return getAllCodes().filter(c => c.restaurantId === restaurantId);
}
